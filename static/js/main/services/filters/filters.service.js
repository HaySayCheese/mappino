// Generated by CoffeeScript 1.9.1
(function() {
  'use strict';

  /**
       * @class
       * @description todo: add desc
       * @version 0.0.1
       * @license todo: add license
   */
  var MFiltersService;

  MFiltersService = (function() {
    function MFiltersService(http1, location1, base641) {
      this.http = http1;
      this.location = location1;
      this.base64 = base641;
      this.filters = {
        map: {
          c: null,
          z: parseInt(6),
          l: "48.455935,34.41285",
          v: null
        },
        base: {
          op_sid: 0,
          cu_sid: 0,
          h_t_sid: 0,
          pr_sid: 0,
          pl_sid: 0,
          b_t_sid: 0,
          p_min: null,
          p_max: null,
          r_c_min: null,
          r_c_max: null,
          f_c_min: null,
          f_c_max: null,
          p_c_min: null,
          p_c_max: null,
          t_a_min: null,
          t_a_max: null,
          f_min: null,
          f_max: null,
          h_a_min: null,
          h_a_max: null,
          c_c_min: null,
          c_c_max: null,
          h_c_min: null,
          h_c_max: null,
          c_h_min: null,
          c_h_max: null,
          a_min: null,
          a_max: null,
          n_b: true,
          s_m: true,
          fml: false,
          frg: false,
          elt: false,
          gas: false,
          h_w: false,
          c_w: false,
          swg: false,
          lft: false,
          sct: false,
          ktn: false,
          s_a: false,
          f_a: false,
          pit: false,
          wtr: false,
          msd: true,
          grd: true
        },
        panels: {
          red: {
            r_t_sid: 1,
            r_op_sid: 0,
            r_cu_sid: 1,
            r_h_t_sid: 'false',
            r_pr_sid: true,
            r_pl_sid: 'true',
            r_bg_t_sid: false
          },
          blue: {
            b_t_sid: null
          },
          green: {
            g_t_sid: null
          },
          yellow: {
            y_t_sid: null
          }
        }
      };
    }

    MFiltersService.prototype.updateUrlFromFilters = function() {
      var filter, filters, panel, panelFilters, panelPrefix, ref, results, searchParameters, type_sid, value;
      filters = this.filters;
      searchParameters = '';
      ref = filters.panels;
      results = [];
      for (panel in ref) {
        panelFilters = ref[panel];
        panelPrefix = panel.substring(0, 1);
        results.push((function() {
          var results1;
          results1 = [];
          for (filter in panelFilters) {
            value = panelFilters[filter];
            type_sid = panelPrefix + '_t_sid';
            if (filter === type_sid && value === null) {
              continue;
            }
            if (value === null || value === '') {
              continue;
            }
            if (value === filters.base[filter.substring(2)]) {
              continue;
            }
            results1.push(searchParameters += (searchParameters ? '&' : '') + filter + '=' + value);
          }
          return results1;
        })());
      }
      return results;
    };


    /**
     * @public
     * @description Formatted string from filters for loading markers
    #
     * @param {object} filters   - Filters of BFiltersService.filters
     * @returns {string}         - String filters
     */

    MFiltersService.prototype.createFiltersStringForLoadMarkers = function() {
      var formattedFiltersObject, formattedPanelFilters, i, len, panel, prefix, ref;
      formattedFiltersObject = {
        zoom: this.filters.map.z,
        viewport: this._createFormattedViewportForLoadingMarkers(),
        filters: []
      };
      ref = this.filters.panels;
      for (i = 0, len = ref.length; i < len; i++) {
        panel = ref[i];
        prefix = panel.substring(0, 1) + '_';
        if (filters[panel][prefix + 't_sid'] != null) {
          formattedPanelFilters = {
            panel: panel
          };
          _.each(filters[panel], function(value, key) {
            if ((value != null) && value !== false) {
              return formattedPanelFilters[key.substring(2)] = value;
            }
          });
          formattedFiltersObject.filters.push(formattedPanelFilters);
        }
      }
      return JSON.stringify(formattedFiltersObject);
    };


    /**
     * @private
     * @description Create formatted viewport for filters string
    #
     * @returns {object} - Formatted viewport
     */

    MFiltersService.prototype._createFormattedViewportForLoadingMarkers = function() {
      var neLat, neLng, sneLat, sneLng, sswLat, sswLng, swLat, swLng;
      sneLat = this.filters.map.v.getNorthEast().lat().toString();
      sneLng = this.filters.map.v.getNorthEast().lng().toString();
      sswLat = this.filters.map.v.getSouthWest().lat().toString();
      sswLng = this.filters.map.v.getSouthWest().lng().toString();
      neLat = sneLat.replace(sneLat.substring(sneLat.indexOf(".") + 3, sneLat.length), "");
      neLng = sneLng.replace(sneLng.substring(sneLng.indexOf(".") + 3, sneLng.length), "");
      swLat = sswLat.replace(sswLat.substring(sswLat.indexOf(".") + 3, sswLat.length), "");
      swLng = sswLng.replace(sswLng.substring(sswLng.indexOf(".") + 3, sswLng.length), "");
      return {
        'ne_lat': neLat,
        'ne_lng': neLng,
        'sw_lat': swLat,
        'sw_lng': swLng
      };
    };

    return MFiltersService;

  })();

  angular.module('mappino.pages.map').factory('MFiltersService', [
    '$http', '$location', 'base64', function(http, location, base64) {
      return new MFiltersService(http, location, base64);
    }
  ]);

}).call(this);

//# sourceMappingURL=filters.service.js.map
