// Generated by CoffeeScript 1.9.1
(function() {
  'use strict';

  /**
   * @class
   * @description todo: add desc
   * @version 0.8.2
   * @license todo: add license
   */
  var BAuthService, bAuthModule;

  BAuthService = (function() {
    function BAuthService(http1, cookieStore1) {
      this.http = http1;
      this.cookieStore = cookieStore1;
      this.URL = {
        'LOGIN': '/ajax/api/accounts/login/',
        'LOGOUT': '/ajax/api/accounts/logout/',
        'REGISTRATION': '/ajax/api/accounts/registration/',
        'CANCEL_REGISTRATION': '/ajax/api/accounts/registration/cancel/',
        'RESEND_SMS_CODE': '/ajax/api/accounts/registration/resend-sms/',
        'VALIDATE_SMS_CODE': '/ajax/api/accounts/registration/',
        'VALIDATE_EMAIL': '/ajax/api/accounts/validate-email/',
        'VALIDATE_PHONE': '/ajax/api/accounts/validate-phone-number/',
        'GET_USER_NAME': '/ajax/api/accounts/on-login-info/',
        'RESTORE_ACCESS_SEND_EMAIL': '/ajax/api/accounts/password-reset/',
        'RESTORE_ACCESS_SEND_PASSWORD': '/ajax/api/accounts/password-reset/restore/'
      };
      this.ERRORS = {
        'LOGIN': {
          'CODES': {
            '3': 'Неверная пара логин - пароль'
          },
          'FATAL': 'Fatal login error',
          'BAD_COOKIE': 'User cookie is bad'
        },
        'RESTORE_ACCESS': {
          'CODES': {
            '1': 'Запрос уже в очереди. Сообщение на почту отправлено повторно.',
            '2': 'Пользователя с такими данными нету'
          }
        },
        'EMAIL': {
          'CODES': {
            '1': 'Некоректная эл. почта',
            '2': 'Указанная эл. почта уже используется'
          }
        },
        'PHONE': {
          'CODES': {
            '1': 'Некоректный номер',
            '2': 'Указанный номер уже используется',
            '3': 'Некоректный код'
          }
        },
        'SMS_CODE': {
          'CODES': {
            '1': 'Некоректный код'
          }
        }
      };
    }


    /**
     * @public
     * @description Login user
    #
     * @param {object} user                     - User object
     * @param {string} user.name                - User name
     * @param {string} user.password            - User password
     * @param {function()} [successCallback]    - Success callback
     * @param {function()} [errorCallback]      - Error callback
     */

    BAuthService.prototype.login = function(user, successCallback, errorCallback) {
      var request, self;
      self = this;
      request = this.http.post(this.URL.LOGIN, {
        'username': user.name,
        'password': user.password
      });
      request.success(function(response) {
        if (response.code === 0) {
          self._saveInStorage(response.user);
          _.isFunction(successCallback) && successCallback(self._formattedResponseUserObject(response.user));
        }
        if (response.code !== 0) {
          return _.isFunction(errorCallback) && errorCallback({
            'code': response.code,
            'message': self.ERRORS.LOGIN.CODES[response.code]
          });
        }
      });
      return request.error(function() {
        return _.isFunction(errorCallback) && errorCallback({
          'message': self.ERRORS.LOGIN.FATAL
        });
      });
    };


    /**
     * @public
     * @description Registration user
    #
     * @param {object} user                     - User object
     * @param {string} user.name                - User name
     * @param {string} user.surname             - User surname
     * @param {number} user.phoneNumber         - User phone number
     * @param {string} user.email               - User email address
     * @param {string} user.password            - User password
     * @param {string} user.passwordRepeat      - User password repeat
     * @param {function()} [successCallback]    - Success callback
     * @param {function()} [errorCallback]      - Error callback
     */

    BAuthService.prototype.registration = function(user, successCallback, errorCallback) {
      var request;
      request = this.http.post(this.URL.REGISTRATION, {
        'name': user.name,
        'surname': user.surname,
        'phone-number': "+380" + user.phoneNumber,
        'email': user.email,
        'password': user.password,
        'password-repeat': user.passwordRepeat
      });
      request.success(function() {
        return _.isFunction(successCallback) && successCallback();
      });
      return request.error(function() {
        return _.isFunction(errorCallback) && errorCallback();
      });
    };


    /**
     * @public
     * @description Cancel registration
    #
     * @param {function()} [successCallback]    - Success callback
     * @param {function()} [errorCallback]      - Error callback
     */

    BAuthService.prototype.cancelRegistration = function(successCallback, errorCallback) {
      var request;
      request = this.http.post(this.URL.CANCEL_REGISTRATION, {});
      request.success(function() {
        return _.isFunction(successCallback) && successCallback();
      });
      return request.error(function() {
        return _.isFunction(errorCallback) && errorCallback();
      });
    };


    /**
     * @public
     * @description Logout user
    #
     * @param {function()} [callback] - callback
     */

    BAuthService.prototype.logout = function(callback) {
      var request, self;
      self = this;
      request = this.http.post(this.URL.LOGOUT, {});
      return request.success(function() {
        self._removeFromStorage();
        return _.isFunction(callback) && callback();
      });
    };


    /**
     * @public
     * @description Try login user using session cookies
    #
     * @param {function()} [successCallback]  - Success callback
     * @param {function()} [errorCallback]    - Error callback
     */

    BAuthService.prototype.tryLogin = function(successCallback, errorCallback) {
      var request, self;
      self = this;
      request = this.http.get(this.URL.GET_USER_NAME);
      request.success(function(response) {
        self._saveInStorage(response.user);
        return _.isFunction(successCallback) && successCallback(self._formattedResponseUserObject(response.user));
      });
      return request.error(function() {
        self._removeFromStorage();
        return _.isFunction(errorCallback) && errorCallback({
          'message': self.ERRORS.LOGIN.BAD_COOKIE
        });
      });
    };


    /**
     * @public
     * @description Validate email address on server
    #
     * @param {string} email                  - Email address
     * @param {function()} [successCallback]  - Success callback
     * @param {function()} [errorCallback]    - Error callback
     */

    BAuthService.prototype.validateEmail = function(email, successCallback, errorCallback) {
      var request, self;
      self = this;
      request = this.http.post(this.URL.VALIDATE_EMAIL, {
        'email': email
      });
      request.success(function(response) {
        if (response.code === 0) {
          _.isFunction(successCallback) && successCallback();
        }
        if (response.code !== 0) {
          return _.isFunction(errorCallback) && errorCallback({
            'code': response.code,
            'message': self.ERRORS.EMAIL.CODES[response.code]
          });
        }
      });
      return request.error(function() {
        return _.isFunction(errorCallback) && errorCallback();
      });
    };


    /**
     * @public
     * @description Validate phone number on server
    #
     * @param {(string|number)} phone         - Phone number
     * @param {function()} [successCallback]  - Success callback
     * @param {function()} [errorCallback]    - Error callback
     */

    BAuthService.prototype.validatePhone = function(phone, successCallback, errorCallback) {
      var request, self;
      self = this;
      request = this.http.post(this.URL.VALIDATE_PHONE, {
        'number': phone
      });
      request.success(function(response) {
        if (response.code === 0) {
          _.isFunction(successCallback) && successCallback();
        }
        if (response.code !== 0) {
          return _.isFunction(errorCallback) && errorCallback({
            'code': response.code,
            'message': self.ERRORS.PHONE.CODES[response.code]
          });
        }
      });
      return request.error(function() {
        return _.isFunction(errorCallback) && errorCallback();
      });
    };


    /**
     * @public
     * @description Validate SMS code
    #
     * @param {(string|number)} code          - SMS code
     * @param {function()} [successCallback]  - Success callback
     * @param {function()} [errorCallback]    - Error callback
     */

    BAuthService.prototype.validateSMSCode = function(code, successCallback, errorCallback) {
      var request, self;
      self = this;
      request = this.http.post(this.URL.VALIDATE_SMS_CODE, {
        'code': code
      });
      request.success(function(response) {
        if (response.code === 0) {
          self._saveInStorage(response.user);
          _.isFunction(successCallback) && successCallback();
        }
        if (response.code !== 0) {
          return _.isFunction(errorCallback) && errorCallback({
            'code': response.code,
            'attempts': response.attempts,
            'max_attempts': response.max_attempts,
            'message': self.ERRORS.SMS_CODE.CODES[response.code]
          });
        }
      });
      return request.error(function() {
        return _.isFunction(errorCallback) && errorCallback();
      });
    };


    /**
     * @public
     * @description Resend SMS code
    #
     * @param {function()} [successCallback]  - Success callback
     * @param {function()} [errorCallback]    - Error callback
     */

    BAuthService.prototype.resendSMSCode = function(successCallback, errorCallback) {
      var request;
      request = this.http.post(this.URL.RESEND_SMS_CODE, {});
      request.success(function() {
        return _.isFunction(successCallback) && successCallback();
      });
      return request.error(function() {
        return _.isFunction(errorCallback) && errorCallback();
      });
    };


    /**
     * @public
     * @description Restore access - send email
    #
     * @param {string} username               - User email or phone number
     * @param {function()} [successCallback]  - Success callback
     * @param {function()} [errorCallback]    - Error callback
     */

    BAuthService.prototype.restoreAccessSendEmail = function(username, successCallback, errorCallback) {
      var request;
      request = this.http.post(this.URL.RESTORE_ACCESS_SEND_EMAIL, {
        'username': username
      });
      request.success(function(response) {
        if (response.code === 0) {
          _.isFunction(successCallback) && successCallback();
        }
        if (response.code !== 0) {
          return _.isFunction(errorCallback) && errorCallback({
            'code': response.code,
            'message': self.ERRORS.RESTORE_ACCESS.CODES[response.code]
          });
        }
      });
      return request.error(function() {
        return _.isFunction(errorCallback) && errorCallback();
      });
    };


    /**
     * @public
     * @description Restore access - send password
    #
     * @param {object} user                  - User object
     * @param {string} user.password         - User password
     * @param {string} user.passwordRepeat   - User password repeat
     * @param {string} token                 - Token
     * @param {function()} [successCallback] - Success callback
     * @param {function()} [errorCallback]   - Error callback
     */

    BAuthService.prototype.restoreAccessSendPassword = function(user, token, successCallback, errorCallback) {
      var request;
      request = this.http.post(this.URL.RESTORE_ACCESS_SEND_PASSWORD, {
        'token': user.token,
        'password': user.password,
        'password-repeat': user.passwordRepeat
      });
      request.success(function(response) {
        if (response.code === 0) {
          _.isFunction(successCallback) && successCallback();
        }
        if (response.code !== 0) {
          return _.isFunction(errorCallback) && errorCallback({
            'code': response.code,
            'message': ''
          });
        }
      });
      return request.error(function() {
        return _.isFunction(errorCallback) && errorCallback();
      });
    };


    /**
     * @public
     * @description Returns user object param value by param name from storage
    #
     * @param {string} param - Name of user param in storage (name, surname or fullName)
    #
     * @returns {string} - Returns user param value by param name
     */

    BAuthService.prototype.getUserParam = function(param) {
      if (localStorage && localStorage.user) {
        return (JSON.parse(localStorage.user))[param];
      } else if (sessionStorage && sessionStorage.user) {
        return (JSON.parse(sessionStorage.user))[param];
      } else {
        return null;
      }
    };


    /*
    All private methods goes here
     */


    /**
     * @private
     * @description Setting user name to a local and session storage
    #
     * @param {object} user            - User object
     * @param {string} user.name       - User name
     * @param {string} user.surname    - User surname
     */

    BAuthService.prototype._saveInStorage = function(user) {
      if (sessionStorage) {
        sessionStorage.user = JSON.stringify(this._formattedResponseUserObject(user));
      }
      if (localStorage) {
        return localStorage.user = JSON.stringify(this._formattedResponseUserObject(user));
      }
    };


    /**
     * @private
     * @description Remove user name from local and session stores
     */

    BAuthService.prototype._removeFromStorage = function() {
      this.cookieStore.remove('sessionid');
      if (localStorage && localStorage.user) {
        delete localStorage.user;
      }
      if (sessionStorage && sessionStorage.user) {
        return delete sessionStorage.user;
      }
    };


    /**
     * @private
     * @description Returns the formatted user object (name, surname and full name)
    #
     * @param {object} user            - User object
     * @param {string} user.name       - User name
     * @param {string} user.surname    - User surname
    #
     * @returns {object} Formatted user object (name, surname and fullName)
     */

    BAuthService.prototype._formattedResponseUserObject = function(user) {
      if (_.isEmpty(user)) {
        false;
      }
      return {
        'name': user.name || '',
        'surname': user.surname || '',
        'fullName': user.name + ' ' + user.surname || ''
      };
    };

    return BAuthService;

  })();

  bAuthModule = angular.module('_modules.bAuth', ['ngCookies', 'underscore']);

  bAuthModule.factory('BAuthService', [
    '$http', '$cookieStore', function(http, cookieStore) {
      return new BAuthService(http, cookieStore);
    }
  ]);

}).call(this);

//# sourceMappingURL=bAuth.module.js.map
