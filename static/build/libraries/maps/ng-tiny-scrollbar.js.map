{"version":3,"sources":["ng-tiny-scrollbar.js"],"names":["angular","module","directive","$window","$timeout","$parse","$animate","restrict","transclude","template","controller","$scope","$element","$attrs","ensureContentPosition","self","contentRatio","contentPosition","contentSize","viewportSize","setEvents","hasTouchEvents","$viewport","on","touchstart","$thumb","start","$scrollbar","drag","element","resize","options","wheel","wheelEvent","autoUpdate","MutationObserver","observer","mutations","update","observe","childList","subtree","characterData","attributes","event","evntObj","originalEvent","touches","length","stopPropagation","$body","addClass","alwaysVisible","mousePosition","isHorizontal","pageX","pageY","thumbPosition","parseInt","css","posiLabel","$document","touchdrag","end","restoreVisibilityAfterWheel","cancel","removeClass","deltaDir","axis","toUpperCase","delta","X","deltaX","Y","deltaY","wheelSpeed","deltaMode","scrollInvert","wheelDelta","wheelDeltaX","wheelSpeedDelta","Math","min","max","dispatchEvent","moveEvent","trackRatio","$overview","wheelLock","preventDefault","mousePositionNew","thumbPositionDelta","type","thumbPositionNew","trackSize","thumbSize","off","defaults","scrollbar","this","extend","_defaults","document","querySelectorAll","undefined","onmousewheel","sizeLabel","sizeLabelCap","charAt","slice","toLowerCase","createEvent","initEvent","initialize","scrollTo","prop","toggleClass","isNaN","then","$digest","cleanup","link","scope","iElement","iAttrs","position","getComputedStyle","getPropertyValue"],"mappings":"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","file":"ng-tiny-scrollbar.js","sourcesContent":["/*!\r\n Copyright 2014 Vadim Kazakov\r\n Adapted from source by Maarten Baijs\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining\r\n a copy of this software and associated documentation files (the\r\n \"Software\"), to deal in the Software without restriction, including\r\n without limitation the rights to use, copy, modify, merge, publish,\r\n distribute, sublicense, and/or sell copies of the Software, and to\r\n permit persons to whom the Software is furnished to do so, subject to\r\n the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be\r\n included in all copies or substantial portions of the Software.\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('ngTinyScrollbar', [])\r\n    .directive('scrollbar', ['$window', '$timeout', '$parse', '$animate', function($window, $timeout, $parse, $animate) {\r\n        return {\r\n            restrict: 'A',\r\n            transclude: true,\r\n            template: '<div class=\"scroll-bar\"><div class=\"scroll-thumb\"></div></div><div class=\"scroll-viewport\"><div class=\"scroll-overview\" ng-transclude></div></div>',\r\n            controller: function($scope, $element, $attrs) {\r\n\r\n                var defaults = {\r\n                    axis : 'y', // Vertical or horizontal scrollbar? ( x || y ).\r\n                    wheel : true, // Enable or disable the mousewheel;\r\n                    wheelSpeed : 40, // How many pixels must the mouswheel scroll at a time.\r\n                    wheelLock : true, // Lock default scrolling window when there is no more content.\r\n                    scrollInvert : false, // Enable invert style scrolling\r\n                    trackSize : false, // Set the size of the scrollbar to auto or a fixed number.\r\n                    thumbSize : false, // Set the size of the thumb to auto or a fixed number.\r\n                    alwaysVisible: true, // Set to false to hide the scrollbar if not being used\r\n                    autoUpdate: false    // Autoupdate the scrollbar if DOM changes. Needs MutationObserver or a polyfill to be available\r\n                };\r\n                var options = $attrs.scrollbar;\r\n                if (options) {\r\n                    options = $parse(options)($scope);\r\n                } else {\r\n                    options = {};\r\n                }\r\n                this.options = angular.extend({}, defaults, options);\r\n                this._defaults = defaults;\r\n\r\n                var self = this,\r\n                    $body = angular.element(document.querySelectorAll('body')[0]),\r\n                    $document = angular.element(document),\r\n                    $viewport = angular.element($element[0].querySelectorAll('.scroll-viewport')[0]),\r\n                    $overview = angular.element($element[0].querySelectorAll('.scroll-overview')[0]),\r\n                    $scrollbar = angular.element($element[0].querySelectorAll('.scroll-bar')[0]),\r\n                    $thumb = angular.element($element[0].querySelectorAll('.scroll-thumb')[0]),\r\n                    mousePosition = 0,\r\n                    isHorizontal = this.options.axis === 'x',\r\n                    hasTouchEvents = ('ontouchstart' in $window),\r\n                    wheelEvent = (\"onwheel\" in document ? \"wheel\" : // Modern browsers support \"wheel\"\r\n                        document.onmousewheel !== undefined ? \"mousewheel\" : // Webkit and IE support at least \"mousewheel\"\r\n                            \"DOMMouseScroll\"), // let's assume that remaining browsers are older Firefox\r\n                    sizeLabel = isHorizontal ? 'width' : 'height',\r\n                    sizeLabelCap = sizeLabel.charAt(0).toUpperCase() + sizeLabel.slice(1).toLowerCase(),\r\n                    posiLabel = isHorizontal ? 'left' : 'top',\r\n                    moveEvent = document.createEvent('HTMLEvents'),\r\n                    restoreVisibilityAfterWheel;\r\n\r\n                moveEvent.initEvent('move', true, true);\r\n                this.contentPosition = 0;\r\n                this.viewportSize = 0;\r\n                this.contentSize = 0;\r\n                this.contentRatio = 0;\r\n                this.trackSize = 0;\r\n                this.trackRatio = 0;\r\n                this.thumbSize = 0;\r\n                this.thumbPosition = 0;\r\n\r\n                this.initialize = function() {\r\n                    if (!this.options.alwaysVisible) {\r\n                        $scrollbar.css('opacity', 0);\r\n                    }\r\n                    self.update();\r\n                    setEvents();\r\n                    return self;\r\n                };\r\n\r\n                this.update = function(scrollTo) {\r\n                    this.viewportSize = $viewport.prop('offset'+ sizeLabelCap);\r\n                    this.contentSize = $overview.prop('scroll'+ sizeLabelCap);\r\n                    this.contentRatio = this.viewportSize / this.contentSize;\r\n                    this.trackSize = this.options.trackSize || this.viewportSize;\r\n                    this.thumbSize = Math.min(this.trackSize, Math.max(0, (this.options.thumbSize || (this.trackSize * this.contentRatio))));\r\n                    this.trackRatio = this.options.thumbSize ? (this.contentSize - this.viewportSize) / (this.trackSize - this.thumbSize) : (this.contentSize / this.trackSize);\r\n                    mousePosition = $scrollbar.prop('offsetTop');\r\n\r\n                    $scrollbar.toggleClass('disable', this.contentRatio >= 1 || isNaN(this.contentRatio));\r\n\r\n                    if (!this.options.alwaysVisible && this.contentRatio < 1 && this.viewportSize > 0) {\r\n                        //flash the scrollbar when update happens\r\n                        $animate.addClass($scrollbar, 'visible').then(function() {\r\n                            $animate.removeClass($scrollbar, 'visible');\r\n                            $scope.$digest();\r\n                        });\r\n                    }\r\n\r\n                    if (scrollTo != null)  {\r\n                        switch (scrollTo) {\r\n                            case 'bottom':\r\n                                this.contentPosition = this.contentSize - this.viewportSize;\r\n                                break;\r\n                            default:\r\n                                this.contentPosition = parseInt(scrollTo, 10) || 0;\r\n                        }\r\n                    }\r\n\r\n                    ensureContentPosition();\r\n                    $thumb.css(posiLabel, self.contentPosition / self.trackRatio + 'px');\r\n                    $scrollbar.css(sizeLabel, self.trackSize + 'px');\r\n                    $thumb.css(sizeLabel, self.thumbSize + 'px');\r\n                    $overview.css(posiLabel, -self.contentPosition + 'px');\r\n\r\n                    return this;\r\n                };\r\n\r\n                function ensureContentPosition() {\r\n                    // if scrollbar is on, ensure the bottom of the content does not go above the bottom of the viewport\r\n                    if (self.contentRatio <= 1 && self.contentPosition > self.contentSize - self.viewportSize) {\r\n                        self.contentPosition = self.contentSize - self.viewportSize;\r\n                    }\r\n                    // if scrollbar is off, ensure the top of the content does not go below the top of the viewport\r\n                    else if (self.contentRatio > 1 && self.contentPosition > 0) {\r\n                        self.contentPosition = 0;\r\n                    }\r\n                }\r\n\r\n                function setEvents() {\r\n\r\n                    if(hasTouchEvents) {\r\n                        $viewport.on('touchstart', touchstart);\r\n                    }\r\n                    $thumb.on('mousedown', start);\r\n                    $scrollbar.on('mousedown', drag);\r\n\r\n                    angular.element($window).on('resize', resize);\r\n\r\n                    if(self.options.wheel) {\r\n                        $element.on(wheelEvent, wheel);\r\n                    }\r\n\r\n                    if (self.options.autoUpdate && MutationObserver) {\r\n                        // check DOM content update\r\n                        var observer = new MutationObserver(function (mutations) {\r\n                            self.update();\r\n                        });\r\n\r\n                        observer.observe($element[0], {\r\n                            childList: true,\r\n                            subtree: true,\r\n                            characterData: true,\r\n                            attributes: true\r\n                        });\r\n                    }\r\n                }\r\n\r\n                function resize() {\r\n                    self.update();\r\n                }\r\n\r\n                function touchstart(event) {\r\n                    var evntObj = (event && event.originalEvent) || event || $window.event;\r\n                    if (1 === evntObj.touches.length) {\r\n                        event.stopPropagation();\r\n                        start(evntObj.touches[0]);\r\n                    }\r\n                }\r\n\r\n                function start(event) {\r\n                    $body.addClass('scroll-no-select');\r\n                    $element.addClass('scroll-no-select');\r\n\r\n                    if (!self.options.alwaysVisible) {\r\n                        $scrollbar.addClass('visible');\r\n                    }\r\n                    mousePosition = isHorizontal ? event.pageX : event.pageY;\r\n                    self.thumbPosition = parseInt($thumb.css(posiLabel), 10) || 0;\r\n\r\n                    if(hasTouchEvents) {\r\n                        $document.on('touchmove', touchdrag);\r\n                        $document.on('touchend', end);\r\n                    }\r\n                    $document.on('mousemove', drag);\r\n                    $document.on('mouseup', end);\r\n                    $thumb.on('mouseup', end);\r\n                }\r\n\r\n                function wheel(event) {\r\n\r\n                    if(self.contentRatio >= 1) {\r\n                        return;\r\n                    }\r\n\r\n                    if (!self.options.alwaysVisible) {\r\n                        //cancel removing visibility if wheel event is triggered before the timeout\r\n                        if (restoreVisibilityAfterWheel) {\r\n                            $timeout.cancel(restoreVisibilityAfterWheel);\r\n                        }\r\n                        $scrollbar.addClass('visible');\r\n\r\n                        restoreVisibilityAfterWheel = $timeout(function() {\r\n                            $scrollbar.removeClass('visible');\r\n                        }, 100);\r\n                    }\r\n\r\n\r\n                    var evntObj = (event && event.originalEvent) || event || $window.event,\r\n                        deltaDir = self.options.axis.toUpperCase(),\r\n                        delta = {\r\n                            X: evntObj.deltaX,\r\n                            Y: evntObj.deltaY\r\n                        },\r\n                        wheelSpeed = evntObj.deltaMode == 0 ? self.options.wheelSpeed : 1;\r\n\r\n                    if (self.options.scrollInvert) {\r\n                        wheelSpeed *= -1;\r\n                    }\r\n\r\n                    if (wheelEvent === 'mousewheel') {\r\n                        delta.Y = -1 * evntObj.wheelDelta / 40;\r\n                        evntObj.wheelDeltaX && ( delta.X = -1 * evntObj.wheelDeltaX / 40 );\r\n                    }\r\n                    delta.X *= -1 / wheelSpeed;\r\n                    delta.Y *= -1 / wheelSpeed;\r\n\r\n                    var wheelSpeedDelta = delta[deltaDir];\r\n\r\n                    self.contentPosition -= wheelSpeedDelta * self.options.wheelSpeed;\r\n                    self.contentPosition = Math.min((self.contentSize - self.viewportSize), Math.max(0, self.contentPosition));\r\n\r\n                    $element[0].dispatchEvent(moveEvent);\r\n\r\n                    ensureContentPosition();\r\n                    $thumb.css(posiLabel, self.contentPosition / self.trackRatio + 'px');\r\n                    $overview.css(posiLabel, -self.contentPosition + 'px');\r\n\r\n                    if(self.options.wheelLock || (self.contentPosition !== (self.contentSize - self.viewportSize) && self.contentPosition !== 0)) {\r\n                        evntObj.preventDefault();\r\n                    }\r\n                }\r\n\r\n                function touchdrag(event) {\r\n                    var evntObj = (event && event.originalEvent) || event || $window.event;\r\n                    if (1 === evntObj.touches.length) {\r\n                        event.preventDefault();\r\n                        drag(evntObj.touches[0]);\r\n                    }\r\n                }\r\n\r\n                function drag(event) {\r\n\r\n                    if(self.contentRatio >= 1) {\r\n                        return;\r\n                    }\r\n\r\n                    var mousePositionNew = isHorizontal ? event.pageX : event.pageY,\r\n                        thumbPositionDelta = mousePositionNew - mousePosition;\r\n\r\n                    if((self.options.scrollInvert && event.type === 'mousemove') ||\r\n                        (event.type !== 'mousemove' && !self.options.scrollInvert))\r\n                    {\r\n                        thumbPositionDelta = mousePosition - mousePositionNew;\r\n                    }\r\n                    var thumbPositionNew = Math.min((self.trackSize - self.thumbSize), Math.max(0, self.thumbPosition + thumbPositionDelta));\r\n                    self.contentPosition = thumbPositionNew * self.trackRatio;\r\n\r\n                    $element[0].dispatchEvent(moveEvent);\r\n\r\n                    ensureContentPosition();\r\n                    $thumb.css(posiLabel, thumbPositionNew + 'px');\r\n                    $overview.css(posiLabel, -self.contentPosition + 'px');\r\n                }\r\n\r\n                function end() {\r\n\r\n                    $body.removeClass('scroll-no-select');\r\n                    $element.removeClass('scroll-no-select');\r\n                    if (!self.options.alwaysVisible) {\r\n                        $scrollbar.removeClass('visible');\r\n                    }\r\n\r\n                    $document.off('mousemove', drag);\r\n                    $document.off('mouseup', end);\r\n                    $thumb.off('mouseup', end);\r\n                    $document.off('touchmove', touchdrag);\r\n                    $document.off('ontouchend', end);\r\n                }\r\n\r\n                this.cleanup = function() {\r\n                    $viewport.off('touchstart', touchstart);\r\n                    $thumb.off('mousedown', start);\r\n                    $scrollbar.off('mousedown', drag);\r\n                    angular.element($window).off('resize', resize);\r\n                    $element.off(wheelEvent, wheel);\r\n                    //ensure scrollbar isn't activated\r\n                    self.options.alwaysVisible = true;\r\n                    end();\r\n                };\r\n\r\n            },\r\n            link: function(scope, iElement, iAttrs, controller) {\r\n                var position = $window.getComputedStyle(iElement[0]).getPropertyValue('position');\r\n                if (position !== 'relative' && position !== 'absolute') {\r\n                    iElement.css('position', 'relative');\r\n                }\r\n                controller.initialize();\r\n                iElement.on('$destroy', function() {\r\n                    controller.cleanup();\r\n                });\r\n            }\r\n        };\r\n    }]);"],"sourceRoot":"/source/"}