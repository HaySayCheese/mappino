{"version":3,"sources":["ng-tiny-scrollbar.js"],"names":["angular","module","provider","this","defaults","axis","wheel","wheelSpeed","wheelLock","scrollInvert","trackSize","thumbSize","alwaysVisible","autoUpdate","$get","directive","$window","$timeout","$parse","$animate","scrollbar","restrict","transclude","template","controller","$scope","$element","$attrs","ensureContentPosition","self","contentRatio","contentPosition","contentSize","viewportSize","setEvents","hasTouchEvents","$viewport","on","touchstart","$thumb","start","$scrollbar","drag","element","resize","options","wheelEvent","MutationObserver","updateTimer","recentWidth","$overview","offsetWidth","recentHeight","offsetHeight","observer","mutations","cancel","update","observe","childList","subtree","characterData","attributes","event","evntObj","originalEvent","touches","length","stopPropagation","$body","addClass","mousePosition","isHorizontal","pageX","pageY","thumbPosition","parseInt","css","posiLabel","$document","touchdrag","end","restoreVisibilityAfterWheel","removeClass","deltaDir","toUpperCase","delta","X","deltaX","Y","deltaY","deltaMode","wheelDelta","wheelDeltaX","wheelSpeedDelta","Math","min","max","dispatchEvent","moveEvent","trackRatio","preventDefault","mousePositionNew","thumbPositionDelta","type","thumbPositionNew","off","extend","_defaults","document","querySelectorAll","undefined","onmousewheel","sizeLabel","sizeLabelCap","charAt","slice","toLowerCase","createEvent","initEvent","initialize","scrollTo","prop","toggleClass","isNaN","then","$digest","cleanup","link","scope","iElement","iAttrs","position","getComputedStyle","getPropertyValue"],"mappings":"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","file":"ng-tiny-scrollbar.js","sourcesContent":["/*!\r\n Copyright 2014 Vadim Kazakov\r\n Adapted from source by Maarten Baijs\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining\r\n a copy of this software and associated documentation files (the\r\n \"Software\"), to deal in the Software without restriction, including\r\n without limitation the rights to use, copy, modify, merge, publish,\r\n distribute, sublicense, and/or sell copies of the Software, and to\r\n permit persons to whom the Software is furnished to do so, subject to\r\n the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be\r\n included in all copies or substantial portions of the Software.\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('ngTinyScrollbar', [])\r\n    .provider('scrollbar', function () {\r\n\r\n        this.defaults = {\r\n            axis: 'y', // Vertical or horizontal scrollbar? ( x || y ).\r\n            wheel: true, // Enable or disable the mousewheel;\r\n            wheelSpeed: 40, // How many pixels must the mouswheel scroll at a time.\r\n            wheelLock: true, // Lock default scrolling window when there is no more content.\r\n            scrollInvert: false, // Enable invert style scrolling\r\n            trackSize: false, // Set the size of the scrollbar to auto or a fixed number.\r\n            thumbSize: false, // Set the size of the thumb to auto or a fixed number.\r\n            alwaysVisible: true, // Set to false to hide the scrollbar if not being used\r\n            autoUpdate: false    // Autoupdate the scrollbar if DOM changes. Needs MutationObserver or a polyfill to be available\r\n        };\r\n\r\n        this.$get = function () {\r\n            return this;\r\n        };\r\n    })\r\n    .directive('scrollbar', ['$window', '$timeout', '$parse', '$animate', 'scrollbar', function($window, $timeout, $parse, $animate, scrollbar) {\r\n        return {\r\n            restrict: 'A',\r\n            transclude: true,\r\n            template: '<div class=\"scroll-bar\"><div class=\"scroll-thumb\"></div></div><div class=\"scroll-viewport\"><div class=\"scroll-overview\" ng-transclude></div></div>',\r\n            controller: function($scope, $element, $attrs) {\r\n\r\n                var options = $attrs.scrollbar;\r\n                if (options) {\r\n                    options = $parse(options)($scope);\r\n                } else {\r\n                    options = {};\r\n                }\r\n                this.options = angular.extend({}, scrollbar.defaults, options);\r\n                this._defaults = scrollbar.defaults;\r\n\r\n                var self = this,\r\n                    $body = angular.element(document.querySelectorAll('body')[0]),\r\n                    $document = angular.element(document),\r\n                    $viewport = angular.element($element[0].querySelectorAll('.scroll-viewport')[0]),\r\n                    $overview = angular.element($element[0].querySelectorAll('.scroll-overview')[0]),\r\n                    $scrollbar = angular.element($element[0].querySelectorAll('.scroll-bar')[0]),\r\n                    $thumb = angular.element($element[0].querySelectorAll('.scroll-thumb')[0]),\r\n                    mousePosition = 0,\r\n                    isHorizontal = this.options.axis === 'x',\r\n                    hasTouchEvents = ('ontouchstart' in $window),\r\n                    wheelEvent = (\"onwheel\" in document ? \"wheel\" : // Modern browsers support \"wheel\"\r\n                        document.onmousewheel !== undefined ? \"mousewheel\" : // Webkit and IE support at least \"mousewheel\"\r\n                            \"DOMMouseScroll\"), // let's assume that remaining browsers are older Firefox\r\n                    sizeLabel = isHorizontal ? 'width' : 'height',\r\n                    sizeLabelCap = sizeLabel.charAt(0).toUpperCase() + sizeLabel.slice(1).toLowerCase(),\r\n                    posiLabel = isHorizontal ? 'left' : 'top',\r\n                    moveEvent = document.createEvent('HTMLEvents'),\r\n                    restoreVisibilityAfterWheel;\r\n\r\n                moveEvent.initEvent('move', true, true);\r\n                this.contentPosition = 0;\r\n                this.viewportSize = 0;\r\n                this.contentSize = 0;\r\n                this.contentRatio = 0;\r\n                this.trackSize = 0;\r\n                this.trackRatio = 0;\r\n                this.thumbSize = 0;\r\n                this.thumbPosition = 0;\r\n\r\n                this.initialize = function() {\r\n                    if (!this.options.alwaysVisible) {\r\n                        $scrollbar.css('opacity', 0);\r\n                    }\r\n                    self.update();\r\n                    setEvents();\r\n                    return self;\r\n                };\r\n\r\n                this.update = function(scrollTo) {\r\n                    this.viewportSize = $viewport.prop('offset'+ sizeLabelCap);\r\n                    this.contentSize = $overview.prop('scroll'+ sizeLabelCap);\r\n                    this.contentRatio = this.viewportSize / this.contentSize;\r\n                    this.trackSize = this.options.trackSize || this.viewportSize;\r\n                    this.thumbSize = Math.min(this.trackSize, Math.max(0, (this.options.thumbSize || (this.trackSize * this.contentRatio))));\r\n                    this.trackRatio = this.options.thumbSize ? (this.contentSize - this.viewportSize) / (this.trackSize - this.thumbSize) : (this.contentSize / this.trackSize);\r\n                    mousePosition = $scrollbar.prop('offsetTop');\r\n\r\n                    $scrollbar.toggleClass('disable', this.contentRatio >= 1 || isNaN(this.contentRatio));\r\n\r\n                    if (!this.options.alwaysVisible && this.contentRatio < 1 && this.viewportSize > 0) {\r\n                        //flash the scrollbar when update happens\r\n                        $animate.addClass($scrollbar, 'visible').then(function() {\r\n                            $animate.removeClass($scrollbar, 'visible');\r\n                            $scope.$digest();\r\n                        });\r\n                    }\r\n\r\n                    if (scrollTo != null)  {\r\n                        switch (scrollTo) {\r\n                            case 'bottom':\r\n                                this.contentPosition = this.contentSize - this.viewportSize;\r\n                                break;\r\n                            default:\r\n                                this.contentPosition = parseInt(scrollTo, 10) || 0;\r\n                        }\r\n                    }\r\n\r\n                    ensureContentPosition();\r\n                    $thumb.css(posiLabel, self.contentPosition / self.trackRatio + 'px');\r\n                    $scrollbar.css(sizeLabel, self.trackSize + 'px');\r\n                    $thumb.css(sizeLabel, self.thumbSize + 'px');\r\n                    $overview.css(posiLabel, -self.contentPosition + 'px');\r\n\r\n                    return this;\r\n                };\r\n\r\n                function ensureContentPosition() {\r\n                    // if scrollbar is on, ensure the bottom of the content does not go above the bottom of the viewport\r\n                    if (self.contentRatio <= 1 && self.contentPosition > self.contentSize - self.viewportSize) {\r\n                        self.contentPosition = self.contentSize - self.viewportSize;\r\n                    }\r\n                    // if scrollbar is off, ensure the top of the content does not go below the top of the viewport\r\n                    else if (self.contentRatio > 1 && self.contentPosition > 0) {\r\n                        self.contentPosition = 0;\r\n                    }\r\n                }\r\n\r\n                function setEvents() {\r\n\r\n                    if(hasTouchEvents) {\r\n                        $viewport.on('touchstart', touchstart);\r\n                    }\r\n                    $thumb.on('mousedown', start);\r\n                    $scrollbar.on('mousedown', drag);\r\n\r\n                    angular.element($window).on('resize', resize);\r\n\r\n                    if(self.options.wheel) {\r\n                        $element.on(wheelEvent, wheel);\r\n                    }\r\n\r\n                    if (self.options.autoUpdate && MutationObserver) {\r\n                        (function () {\r\n                            var recentWidth = $overview[0].offsetWidth,\r\n                                recentHeight = $overview[0].offsetHeight,\r\n                                updateTimer;\r\n\r\n                            // check DOM content update\r\n                            var observer = new MutationObserver(function (mutations) {\r\n                                // Render scrollbar only with $overview dimension changes, once per digest cycle\r\n                                if (recentWidth !== $overview[0].offsetWidth ||\r\n                                    recentHeight !== $overview[0].offsetHeight) {\r\n                                    $timeout.cancel(updateTimer);\r\n                                    updateTimer = $timeout(function () {\r\n                                        recentWidth = $overview[0].offsetWidth;\r\n                                        recentHeight = $overview[0].offsetHeight;\r\n                                        self.update();\r\n                                    });\r\n                                }\r\n                            });\r\n\r\n                            observer.observe($element[0], {\r\n                                childList: true,\r\n                                subtree: true,\r\n                                characterData: true,\r\n                                attributes: true\r\n                            });\r\n                        })();\r\n                    }\r\n                }\r\n\r\n                function resize() {\r\n                    self.update();\r\n                }\r\n\r\n                function touchstart(event) {\r\n                    var evntObj = (event && event.originalEvent) || event || $window.event;\r\n                    if (1 === evntObj.touches.length) {\r\n                        event.stopPropagation();\r\n                        start(evntObj.touches[0]);\r\n                    }\r\n                }\r\n\r\n                function start(event) {\r\n                    $body.addClass('scroll-no-select');\r\n                    $element.addClass('scroll-no-select');\r\n\r\n                    if (!self.options.alwaysVisible) {\r\n                        $scrollbar.addClass('visible');\r\n                    }\r\n                    mousePosition = isHorizontal ? event.pageX : event.pageY;\r\n                    self.thumbPosition = parseInt($thumb.css(posiLabel), 10) || 0;\r\n\r\n                    if(hasTouchEvents) {\r\n                        $document.on('touchmove', touchdrag);\r\n                        $document.on('touchend', end);\r\n                    }\r\n                    $document.on('mousemove', drag);\r\n                    $document.on('mouseup', end);\r\n                    $thumb.on('mouseup', end);\r\n                }\r\n\r\n                function wheel(event) {\r\n\r\n                    if(self.contentRatio >= 1) {\r\n                        return;\r\n                    }\r\n\r\n                    if (!self.options.alwaysVisible) {\r\n                        //cancel removing visibility if wheel event is triggered before the timeout\r\n                        if (restoreVisibilityAfterWheel) {\r\n                            $timeout.cancel(restoreVisibilityAfterWheel);\r\n                        }\r\n                        $scrollbar.addClass('visible');\r\n\r\n                        restoreVisibilityAfterWheel = $timeout(function() {\r\n                            $scrollbar.removeClass('visible');\r\n                        }, 100);\r\n                    }\r\n\r\n\r\n                    var evntObj = (event && event.originalEvent) || event || $window.event,\r\n                        deltaDir = self.options.axis.toUpperCase(),\r\n                        delta = {\r\n                            X: evntObj.deltaX,\r\n                            Y: evntObj.deltaY\r\n                        },\r\n                        wheelSpeed = evntObj.deltaMode == 0 ? self.options.wheelSpeed : 1;\r\n\r\n                    if (self.options.scrollInvert) {\r\n                        wheelSpeed *= -1;\r\n                    }\r\n\r\n                    if (wheelEvent === 'mousewheel') {\r\n                        delta.Y = -1 * evntObj.wheelDelta / 40;\r\n                        evntObj.wheelDeltaX && ( delta.X = -1 * evntObj.wheelDeltaX / 40 );\r\n                    }\r\n                    delta.X *= -1 / wheelSpeed;\r\n                    delta.Y *= -1 / wheelSpeed;\r\n\r\n                    var wheelSpeedDelta = delta[deltaDir];\r\n\r\n                    self.contentPosition -= wheelSpeedDelta * self.options.wheelSpeed;\r\n                    self.contentPosition = Math.min((self.contentSize - self.viewportSize), Math.max(0, self.contentPosition));\r\n\r\n                    $element[0].dispatchEvent(moveEvent);\r\n\r\n                    ensureContentPosition();\r\n                    $thumb.css(posiLabel, self.contentPosition / self.trackRatio + 'px');\r\n                    $overview.css(posiLabel, -self.contentPosition + 'px');\r\n\r\n                    if(self.options.wheelLock || (self.contentPosition !== (self.contentSize - self.viewportSize) && self.contentPosition !== 0)) {\r\n                        evntObj.preventDefault();\r\n                    }\r\n                }\r\n\r\n                function touchdrag(event) {\r\n                    var evntObj = (event && event.originalEvent) || event || $window.event;\r\n                    if (1 === evntObj.touches.length) {\r\n                        event.preventDefault();\r\n                        drag(evntObj.touches[0]);\r\n                    }\r\n                }\r\n\r\n                function drag(event) {\r\n\r\n                    if(self.contentRatio >= 1) {\r\n                        return;\r\n                    }\r\n\r\n                    var mousePositionNew = isHorizontal ? event.pageX : event.pageY,\r\n                        thumbPositionDelta = mousePositionNew - mousePosition;\r\n\r\n                    if((self.options.scrollInvert && event.type === 'mousemove') ||\r\n                        (event.type !== 'mousemove' && !self.options.scrollInvert))\r\n                    {\r\n                        thumbPositionDelta = mousePosition - mousePositionNew;\r\n                    }\r\n                    var thumbPositionNew = Math.min((self.trackSize - self.thumbSize), Math.max(0, self.thumbPosition + thumbPositionDelta));\r\n                    self.contentPosition = thumbPositionNew * self.trackRatio;\r\n\r\n                    $element[0].dispatchEvent(moveEvent);\r\n\r\n                    ensureContentPosition();\r\n                    $thumb.css(posiLabel, thumbPositionNew + 'px');\r\n                    $overview.css(posiLabel, -self.contentPosition + 'px');\r\n                }\r\n\r\n                function end() {\r\n\r\n                    $body.removeClass('scroll-no-select');\r\n                    $element.removeClass('scroll-no-select');\r\n                    if (!self.options.alwaysVisible) {\r\n                        $scrollbar.removeClass('visible');\r\n                    }\r\n\r\n                    $document.off('mousemove', drag);\r\n                    $document.off('mouseup', end);\r\n                    $thumb.off('mouseup', end);\r\n                    $document.off('touchmove', touchdrag);\r\n                    $document.off('ontouchend', end);\r\n                }\r\n\r\n                this.cleanup = function() {\r\n                    $viewport.off('touchstart', touchstart);\r\n                    $thumb.off('mousedown', start);\r\n                    $scrollbar.off('mousedown', drag);\r\n                    angular.element($window).off('resize', resize);\r\n                    $element.off(wheelEvent, wheel);\r\n                    //ensure scrollbar isn't activated\r\n                    self.options.alwaysVisible = true;\r\n                    end();\r\n                };\r\n\r\n            },\r\n            link: function(scope, iElement, iAttrs, controller) {\r\n                var position = $window.getComputedStyle(iElement[0]).getPropertyValue('position');\r\n                if (position !== 'relative' && position !== 'absolute') {\r\n                    iElement.css('position', 'relative');\r\n                }\r\n                controller.initialize();\r\n                iElement.on('$destroy', function() {\r\n                    controller.cleanup();\r\n                });\r\n            }\r\n        };\r\n    }]);"],"sourceRoot":"/source/"}